import{_ as t,c as e,o as l,a2 as i}from"./chunks/framework.Bx6qu0xe.js";const a="/assets/image.CYbI5als.png",n="/assets/image-1.UMz7bUSM.png",b=JSON.parse('{"title":"redis","description":"","frontmatter":{"layout":"doc","title":"redis"},"headers":[],"relativePath":"note/MySQL.md","filePath":"note/MySQL.md"}'),s={name:"note/MySQL.md"},r=i('<h1 id="慢查询优化" tabindex="-1">慢查询优化 <a class="header-anchor" href="#慢查询优化" aria-label="Permalink to &quot;慢查询优化&quot;">​</a></h1><p>可以使用EXPLAIN或DESC命令获取MySQL如何执行SELECT语句的信息</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">id</th><th style="text-align:center;">select_type</th><th style="text-align:center;">table</th><th style="text-align:center;">partitions</th><th style="text-align:center;">type</th><th style="text-align:center;">possible_keys</th><th style="text-align:center;">key</th><th style="text-align:center;">key_len</th><th style="text-align:center;">ref</th><th style="text-align:center;">rows</th><th style="text-align:center;">filtered</th><th style="text-align:center;">Extra</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SIMPLE</td><td style="text-align:center;">t_user</td><td style="text-align:center;">NULL</td><td style="text-align:center;">const</td><td style="text-align:center;">PRIMARY</td><td style="text-align:center;">PRIMARY</td><td style="text-align:center;">98</td><td style="text-align:center;">const</td><td style="text-align:center;">1</td><td style="text-align:center;">100.00</td><td style="text-align:center;">NULL</td></tr></tbody></table><p>需要重点关注的字段</p><ul><li>possible_keys 当前sql可能会用到的索引</li><li>key 当前sql实际命中的索引</li><li>key_len 索引占用的大小</li><li>Extra 额外优化建议 <ul><li>Using where; Using Index 查询使用了索引，需要的数据能全部在索引列中找到，不需要回表</li><li>Using index condition 查询使用了索引，但是需要回表查询数据</li></ul></li><li>type 这条sql的连接类型，性能由好到差为：NULL、system、const、eq_ref、ref、range、index、all <ul><li>NULL：查询没有用到表</li><li>system：查询系统中的表</li><li>const：根据主键查询</li><li>eq_ref：根据主键查询或唯一索引查询，返回一条数据</li><li>ref：索引查询，可能时多条数据</li><li>range：范围查询</li><li>index：索引树查询</li><li>all：全盘扫描</li></ul></li></ul><h1 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h1><p>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（b+）树，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p>B Tree <img src="'+a+'" alt="alt text"> 非叶子节点也会存储数据</p><p>B+ Tree 是在B Tree基础上的一种优化，使其更适合实现外存储索引结构， InnoDB 存储引擎就是用 B+Tree 实现其索引结构 所有数据存储在叶子节点，并且叶子节点是一个双向链表</p><h2 id="聚集索引和非聚集索引" tabindex="-1">聚集索引和非聚集索引 <a class="header-anchor" href="#聚集索引和非聚集索引" aria-label="Permalink to &quot;聚集索引和非聚集索引&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">含义</th><th style="text-align:center;">特点</th></tr></thead><tbody><tr><td style="text-align:center;">聚集索引</td><td style="text-align:center;">将数据和索引存在一起，索引结构的叶子节点保存了整行数据</td><td style="text-align:center;">必须有且只存在一个</td></tr><tr><td style="text-align:center;">二级索引</td><td style="text-align:center;">将数据和索引分开存储，索引的叶子节点关联对应行的主键</td><td style="text-align:center;">可以存在多个</td></tr></tbody></table><p>聚簇索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚簇索引</li><li>如果不存在主键，则第一个唯一索引作为聚簇索引</li><li>如果表没有主键和唯一索引，则Innodb会自动生成一个rowid作为隐藏的聚簇索引</li></ul><h2 id="回表查询" tabindex="-1">回表查询 <a class="header-anchor" href="#回表查询" aria-label="Permalink to &quot;回表查询&quot;">​</a></h2><p>回表查询：通过非聚簇索引找到对应的主键值，然后根据主键值找到聚集索引中对应行的整行数据，这个过程就是回表 <img src="'+n+'" alt="alt text"></p><h2 id="覆盖索引" tabindex="-1">覆盖索引 <a class="header-anchor" href="#覆盖索引" aria-label="Permalink to &quot;覆盖索引&quot;">​</a></h2><p>指查询用到了索引，并且返回需要的列，在该索引中已经全部找到</p><h2 id="索引的创建原则" tabindex="-1">索引的创建原则 <a class="header-anchor" href="#索引的创建原则" aria-label="Permalink to &quot;索引的创建原则&quot;">​</a></h2><ol><li>数据量大，且查询频繁的表（单表超过10w）</li><li>常作为查询条件、排序、分组的字段</li><li>字段内容区分度高</li><li>内容较长的使用前缀索引</li><li>尽量使用联合索引，避免回表</li><li>要控制索引的数量</li><li>如果索引列不能为null，要使用not null约束</li></ol><h2 id="索引失效" tabindex="-1">索引失效 <a class="header-anchor" href="#索引失效" aria-label="Permalink to &quot;索引失效&quot;">​</a></h2><ol><li>违反最左前缀法制 指的是查询从索引的最左前列开始，并且不跳过索引中的列</li><li>范围查询右边的列，不能使用索引、</li><li>不要在索引列商最运算操作，索引将失效</li><li>字符串不加单引号，有可能会导致索引失效（类型转换会导致索引失效）</li><li>以‘%’开头的Like模糊查询，索引失效</li></ol><h2 id="sql优化" tabindex="-1">SQL优化 <a class="header-anchor" href="#sql优化" aria-label="Permalink to &quot;SQL优化&quot;">​</a></h2><ol><li>SELECT 语句必须指明字段名称（不使用select *）</li><li>避免索引失效的写法</li><li>尽量使用union all代替union</li><li>避免在where子句中对字段进行表达式操作</li><li>join优化 能用inner join就不用<code>left\\right join</code>，如必须使用，则以小表为驱动</li></ol><h1 id="事务特性-acid" tabindex="-1">事务特性 ACID <a class="header-anchor" href="#事务特性-acid" aria-label="Permalink to &quot;事务特性 ACID&quot;">​</a></h1><p>事务时一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向数据库提交或撤销，即这些操作要么全部同事成功，要么同时失败</p><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性（Consistency）：事务完成时，必须使所有数据保持一致状态</li><li>隔离性（Isolation）：数据库系统提供隔离机制，保证事务在不受外部并发操作的影响下的独立环境运行</li><li>持久性（Durability）：事务一旦提交或回滚，他对数据库中的数据改变就是永久的</li></ul><h2 id="并发事务" tabindex="-1">并发事务 <a class="header-anchor" href="#并发事务" aria-label="Permalink to &quot;并发事务&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">问题</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">脏读</td><td style="text-align:center;">一个事务读到另外一个事务还未提交的数据</td></tr><tr><td style="text-align:center;">不可重复读</td><td style="text-align:center;">一个事务先后读取同一条数据，但是2此读取的数据不同</td></tr><tr><td style="text-align:center;">幻读</td><td style="text-align:center;">一个事务按照条件查询数据时，没有对应的数据行，但是在插入时，又发小这行数据已经存在，好像出现‘幻影’</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">Read uncommitted 未提交读</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">Read Committed 读已提交</td><td style="text-align:center;">x</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">Repeatable Read（默认）可重复读</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">Serializable 串行化</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td></tr></tbody></table><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><ul><li>redo log：记录的是数据页的物理变化，服务器宕机可用来同步数据</li><li>undo log：记录逻辑日志，当事务回滚时，通过逆操作恢复原来的数据</li><li>redo log保证事务持久性、undo log保证事务原子性和一致性</li></ul>',32),d=[r];function h(o,c,y,g,x,p){return l(),e("div",null,d)}const k=t(s,[["render",h]]);export{b as __pageData,k as default};
